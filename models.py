# generated by datamodel-codegen:
#   filename:  fdcnal-food-data_central_api-1.0.0-resolved.json
#   timestamp: 2022-02-18T21:55:44+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional, Union

from pydantic import BaseModel, Field, conint


class AbridgedFoodNutrient(BaseModel):
    number: Optional[str] = Field(None, example="303")
    name: Optional[str] = Field(None, example="Iron, Fe")
    amount: Optional[float] = Field(None, example=0.53)
    unit_name: Optional[str] = Field(None, alias="unitName", example="mg")
    derivation_code: Optional[str] = Field(None, alias="derivationCode", example="LCCD")
    derivation_description: Optional[str] = Field(
        None,
        alias="derivationDescription",
        example="Calculated from a daily value percentage per serving size measure",
    )


class Nutrient(BaseModel):
    id: Optional[int] = Field(None, example=1005)
    number: Optional[str] = Field(None, example="305")
    name: Optional[str] = Field(None, example="Carbohydrate, by difference")
    rank: Optional[int] = Field(None, example=1110)
    unit_name: Optional[str] = Field(None, alias="unitName", example="g")


class FoodNutrientSource(BaseModel):
    id: Optional[int] = Field(None, example=9)
    code: Optional[str] = Field(None, example="12")
    description: Optional[str] = Field(
        None, example="Manufacturer's analytical; partial documentation"
    )


class NutrientAcquisitionDetails(BaseModel):
    sample_unit_id: Optional[int] = Field(None, alias="sampleUnitId", example=321632)
    purchase_date: Optional[str] = Field(
        None, alias="purchaseDate", example="12/2/2005"
    )
    store_city: Optional[str] = Field(None, alias="storeCity", example="TRUSSVILLE")
    store_state: Optional[str] = Field(None, alias="storeState", example="AL")


class NutrientConversionFactors(BaseModel):
    type: Optional[str] = Field(None, example=".ProteinConversionFactor")
    value: Optional[float] = Field(None, example=6.25)


class FoodCategory(BaseModel):
    id: Optional[int] = Field(None, example=11)
    code: Optional[str] = Field(None, example="1100")
    description: Optional[str] = Field(
        None, example="Vegetables and Vegetable Products"
    )


class FoodComponent(BaseModel):
    id: Optional[int] = Field(None, example=59929)
    name: Optional[str] = Field(None, example="External fat")
    data_points: Optional[int] = Field(None, alias="dataPoints", example=24)
    gram_weight: Optional[float] = Field(None, alias="gramWeight", example=2.1)
    is_refuse: Optional[bool] = Field(None, alias="isRefuse", example=True)
    min_year_acquired: Optional[int] = Field(
        None, alias="minYearAcquired", example=2011
    )
    percent_weight: Optional[float] = Field(None, alias="percentWeight", example=0.5)


class MeasureUnit(BaseModel):
    id: Optional[int] = Field(None, example=999)
    abbreviation: Optional[str] = Field(None, example="undetermined")
    name: Optional[str] = Field(None, example="undetermined")


class RetentionFactor(BaseModel):
    id: Optional[int] = Field(None, example=235)
    code: Optional[int] = Field(None, example=3460)
    description: Optional[str] = Field(None, example="VEG, ROOTS, ETC, SAUTEED")


class WweiaFoodCategory(BaseModel):
    wweia_food_category_code: Optional[int] = Field(
        None, alias="wweiaFoodCategoryCode", example=3002
    )
    wweia_food_category_description: Optional[str] = Field(
        None, alias="wweiaFoodCategoryDescription", example="Meat mixed dishes"
    )


class Format(Enum):
    abridged = "abridged"
    full = "full"


class FoodsCriteria(BaseModel):
    fdc_ids: Optional[List[int]] = Field(
        None,
        alias="fdcIds",
        description="List of multiple FDC ID's",
        example=[534358, 373052, 616350],
        max_items=20,
        min_items=1,
    )
    format: Optional[Format] = Field(
        None,
        description="Optional. 'abridged' for an abridged set of elements, 'full' for all elements (default).",
    )
    nutrients: Optional[List[int]] = Field(
        None,
        description="Optional. List of up to 25 nutrient numbers. Only the nutrient information for the specified nutrients will be returned.  If a food does not have any matching nutrients, the food will be returned with an empty foodNutrients element.",
        example=[203, 204, 205],
        max_items=25,
        min_items=1,
    )


class DataTypeEnum(Enum):
    branded = "Branded"
    foundation = "Foundation"
    survey__fndds_ = "Survey (FNDDS)"
    sr__legacy = "SR Legacy"


class SortBy(Enum):
    data_type_keyword = "dataType.keyword"
    lowercase_description_keyword = "lowercaseDescription.keyword"
    fdc_id = "fdcId"
    published_date = "publishedDate"


class SortOrder(Enum):
    asc = "asc"
    desc = "desc"


class FoodListCriteria(BaseModel):
    data_type: Optional[List[DataTypeEnum]] = Field(
        None,
        alias="dataType",
        description="Optional. Filter on a specific data type; specify one or more values in an array.",
        example=["Foundation", "SR Legacy"],
        max_items=4,
        min_items=1,
    )
    page_size: Optional[conint(ge=1, le=200)] = Field(
        None,
        alias="pageSize",
        description="Optional. Maximum number of results to return for the current page. Default is 50.",
        example=25,
    )
    page_number: Optional[int] = Field(
        None,
        alias="pageNumber",
        description="Optional. Page number to retrieve. The offset into the overall result set is expressed as (pageNumber * pageSize)",
        example=2,
    )
    sort_by: Optional[SortBy] = Field(
        None,
        alias="sortBy",
        description="Optional. Specify one of the possible values to sort by that field. Note, dataType.keyword will be dataType and lowercaseDescription.keyword will be description in future releases.",
    )
    sort_order: Optional[SortOrder] = Field(
        None,
        alias="sortOrder",
        description="Optional. The sort direction for the results. Only applicable if sortBy is specified.",
    )


class FoodSearchCriteria(BaseModel):
    query: Optional[str] = Field(
        None,
        description="Search terms to use in the search. The string may also include standard [search operators](https://fdc.nal.usda.gov/help.html#bkmk-2)",
        example="Cheddar cheese",
    )
    data_type: Optional[List[DataTypeEnum]] = Field(
        None,
        alias="dataType",
        description="Optional. Filter on a specific data type; specify one or more values in an array.",
        example=["Foundation", "SR Legacy"],
        max_items=4,
        min_items=1,
    )
    page_size: Optional[conint(ge=1, le=200)] = Field(
        None,
        alias="pageSize",
        description="Optional. Maximum number of results to return for the current page. Default is 50.",
        example=25,
    )
    page_number: Optional[int] = Field(
        None,
        alias="pageNumber",
        description="Optional. Page number to retrieve. The offset into the overall result set is expressed as (pageNumber * pageSize)",
        example=2,
    )
    sort_by: Optional[SortBy] = Field(
        None,
        alias="sortBy",
        description="Optional. Specify one of the possible values to sort by that field. Note, dataType.keyword will be dataType and description.keyword will be description in future releases.",
    )
    sort_order: Optional[SortOrder] = Field(
        None,
        alias="sortOrder",
        description="Optional. The sort direction for the results. Only applicable if sortBy is specified.",
    )
    brand_owner: Optional[str] = Field(
        None,
        alias="brandOwner",
        description="Optional. Filter results based on the brand owner of the food. Only applies to Branded Foods.",
        example="Kar Nut Products Company",
    )


class SearchResultFood(BaseModel):
    fdc_id: int = Field(
        ..., alias="fdcId", description="Unique ID of the food.", example=45001529
    )
    data_type: Optional[str] = Field(
        None,
        alias="dataType",
        description="The type of the food data.",
        example="Branded",
    )
    description: str = Field(
        ..., description="The description of the food.", example="BROCCOLI"
    )
    food_code: Optional[str] = Field(
        None,
        alias="foodCode",
        description="Any A unique ID identifying the food within FNDDS.",
    )
    food_nutrients: Optional[List[AbridgedFoodNutrient]] = Field(
        None, alias="foodNutrients"
    )
    publication_date: Optional[str] = Field(
        None,
        alias="publicationDate",
        description="Date the item was published to FDC.",
        example="4/1/2019",
    )
    scientific_name: Optional[str] = Field(
        None, alias="scientificName", description="The scientific name of the food."
    )
    brand_owner: Optional[str] = Field(
        None,
        alias="brandOwner",
        description="Brand owner for the food. Only applies to Branded Foods.",
        example="Supervalu, Inc.",
    )
    gtin_upc: Optional[str] = Field(
        None,
        alias="gtinUpc",
        description="GTIN or UPC code identifying the food. Only applies to Branded Foods.",
        example="041303020937",
    )
    ingredients: Optional[str] = Field(
        None,
        description="The list of ingredients (as it appears on the product label). Only applies to Branded Foods.",
    )
    ndb_number: Optional[int] = Field(
        None,
        alias="ndbNumber",
        description="Unique number assigned for foundation foods. Only applies to Foundation and SRLegacy Foods.",
    )
    additional_descriptions: Optional[str] = Field(
        None,
        alias="additionalDescriptions",
        description="Any additional descriptions of the food.",
        example="Coon; sharp cheese; Tillamook; Hoop; Pioneer; New York; Wisconsin; Longhorn",
    )
    all_highlight_fields: Optional[str] = Field(
        None, alias="allHighlightFields", description="allHighlightFields"
    )
    score: Optional[float] = Field(
        None,
        description="Relative score indicating how well the food matches the search criteria.",
    )


class BrandedFoodItemLabelNutrientsFat(BaseModel):
    value: Optional[float] = Field(None, example=8.9992)


class BrandedFoodItemLabelNutrientsSaturatedFat(BaseModel):
    value: Optional[float] = Field(None, example=0.9996)


class BrandedFoodItemLabelNutrientsTransFat(BaseModel):
    value: Optional[float] = Field(None, example=0)


class BrandedFoodItemLabelNutrientsCarbohydrates(BaseModel):
    value: Optional[float] = Field(None, example=12.0008)


class BrandedFoodItemLabelNutrientsFiber(BaseModel):
    value: Optional[float] = Field(None, example=1.988)


class BrandedFoodItemLabelNutrientsSugars(BaseModel):
    value: Optional[float] = Field(None, example=7.9996)


class BrandedFoodItemLabelNutrientsProtein(BaseModel):
    value: Optional[float] = Field(None, example=4.0012)


class BrandedFoodItemLabelNutrientsCalcium(BaseModel):
    value: Optional[float] = Field(None, example=19.88)


class BrandedFoodItemLabelNutrientsIron(BaseModel):
    value: Optional[float] = Field(None, example=0.7196)


class BrandedFoodItemLabelNutrientsPostassium(BaseModel):
    value: Optional[float] = Field(None, example=159.88)


class BrandedFoodItemLabelNutrientsCalories(BaseModel):
    value: Optional[float] = Field(None, example=140)


class BrandedFoodItemLabelNutrients(BaseModel):
    fat: Optional[BrandedFoodItemLabelNutrientsFat] = None
    saturated_fat: Optional[BrandedFoodItemLabelNutrientsSaturatedFat] = Field(
        None, alias="saturatedFat"
    )
    trans_fat: Optional[BrandedFoodItemLabelNutrientsTransFat] = Field(
        None, alias="transFat"
    )
    cholesterol: Optional[BrandedFoodItemLabelNutrientsTransFat] = None
    sodium: Optional[BrandedFoodItemLabelNutrientsTransFat] = None
    carbohydrates: Optional[BrandedFoodItemLabelNutrientsCarbohydrates] = None
    fiber: Optional[BrandedFoodItemLabelNutrientsFiber] = None
    sugars: Optional[BrandedFoodItemLabelNutrientsSugars] = None
    protein: Optional[BrandedFoodItemLabelNutrientsProtein] = None
    calcium: Optional[BrandedFoodItemLabelNutrientsCalcium] = None
    iron: Optional[BrandedFoodItemLabelNutrientsIron] = None
    postassium: Optional[BrandedFoodItemLabelNutrientsPostassium] = None
    calories: Optional[BrandedFoodItemLabelNutrientsCalories] = None


class FoodAttributeFoodAttributeType(BaseModel):
    id: Optional[int] = Field(None, example=1002)
    name: Optional[str] = Field(None, example="Adjustments")
    description: Optional[str] = Field(
        None, example="Adjustments made to foods, including moisture and fat changes."
    )


class AbridgedFoodItem(BaseModel):
    data_type: str = Field(..., alias="dataType", example="Branded")
    description: str = Field(..., example="NUT 'N BERRY MIX")
    fdc_id: int = Field(..., alias="fdcId", example=534358)
    food_nutrients: Optional[List[AbridgedFoodNutrient]] = Field(
        None, alias="foodNutrients"
    )
    publication_date: Optional[str] = Field(
        None, alias="publicationDate", example="4/1/2019"
    )
    brand_owner: Optional[str] = Field(
        None,
        alias="brandOwner",
        description="only applies to Branded Foods",
        example="Kar Nut Products Company",
    )
    gtin_upc: Optional[str] = Field(
        None,
        alias="gtinUpc",
        description="only applies to Branded Foods",
        example="077034085228",
    )
    ndb_number: Optional[int] = Field(
        None,
        alias="ndbNumber",
        description="only applies to Foundation and SRLegacy Foods",
        example=7954,
    )
    food_code: Optional[str] = Field(
        None,
        alias="foodCode",
        description="only applies to Survey Foods",
        example="27415110",
    )


class SampleFoodItem(BaseModel):
    fdc_id: int = Field(..., alias="fdcId", example=45551)
    datatype: Optional[str] = Field(None, example="Sample")
    description: str = Field(
        ..., example="Beef, Tenderloin Roast, select, roasted, comp5, lean (34BLTR)"
    )
    food_class: Optional[str] = Field(None, alias="foodClass", example="Composite")
    publication_date: Optional[str] = Field(
        None, alias="publicationDate", example="4/1/2019"
    )
    food_attributes: Optional[List[FoodCategory]] = Field(None, alias="foodAttributes")


class FoodNutrientDerivation(BaseModel):
    id: Optional[int] = Field(None, example=75)
    code: Optional[str] = Field(None, example="LCCD")
    description: Optional[str] = Field(
        None,
        example="Calculated from a daily value percentage per serving size measure",
    )
    food_nutrient_source: Optional[FoodNutrientSource] = Field(
        None, alias="foodNutrientSource"
    )


class NutrientAnalysisDetails(BaseModel):
    sub_sample_id: Optional[int] = Field(None, alias="subSampleId", example=343866)
    amount: Optional[float] = Field(None, example=0)
    nutrient_id: Optional[int] = Field(None, alias="nutrientId", example=1005)
    lab_method_description: Optional[str] = Field(
        None, alias="labMethodDescription", example="10.2135/cropsci2017.04.0244"
    )
    lab_method_original_description: Optional[str] = Field(
        None, alias="labMethodOriginalDescription"
    )
    lab_method_link: Optional[str] = Field(
        None,
        alias="labMethodLink",
        example="https://doi.org/10.2135/cropsci2017.04.0244",
    )
    lab_method_technique: Optional[str] = Field(
        None, alias="labMethodTechnique", example="DOI for Beans"
    )
    nutrient_acquisition_details: Optional[List[NutrientAcquisitionDetails]] = Field(
        None, alias="nutrientAcquisitionDetails"
    )


class FoodAttribute(BaseModel):
    id: Optional[int] = Field(None, example=25117)
    sequence_number: Optional[int] = Field(None, alias="sequenceNumber", example=1)
    value: Optional[str] = Field(None, example="Moisture change: -5.0%")
    food_attribute_type: Optional[FoodAttributeFoodAttributeType] = Field(
        None, alias="FoodAttributeType"
    )


class FoodPortion(BaseModel):
    id: Optional[int] = Field(None, example=135806)
    amount: Optional[float] = Field(None, example=1)
    data_points: Optional[int] = Field(None, alias="dataPoints", example=9)
    gram_weight: Optional[float] = Field(None, alias="gramWeight", example=91)
    min_year_acquired: Optional[int] = Field(
        None, alias="minYearAcquired", example=2011
    )
    modifier: Optional[str] = Field(None, example="10205")
    portion_description: Optional[str] = Field(
        None, alias="portionDescription", example="1 cup"
    )
    sequence_number: Optional[int] = Field(None, alias="sequenceNumber", example=1)
    measure_unit: Optional[MeasureUnit] = Field(None, alias="measureUnit")


class InputFoodFoundation(BaseModel):
    id: Optional[int] = Field(None, example=45551)
    food_description: Optional[str] = Field(
        None,
        alias="foodDescription",
        example="Beef, Tenderloin Roast, select, roasted, comp5, lean (34BLTR)",
    )
    input_food: Optional[SampleFoodItem] = Field(None, alias="inputFood")


class SearchResult(BaseModel):
    food_search_criteria: Optional[FoodSearchCriteria] = Field(
        None, alias="foodSearchCriteria"
    )
    total_hits: Optional[int] = Field(
        None,
        alias="totalHits",
        description="The total number of foods found matching the search criteria.",
        example=1034,
    )
    current_page: Optional[int] = Field(
        None,
        alias="currentPage",
        description="The current page of results being returned.",
    )
    total_pages: Optional[int] = Field(
        None,
        alias="totalPages",
        description="The total number of pages found matching the search criteria.",
    )
    foods: Optional[List[SearchResultFood]] = Field(
        None,
        description="The list of foods found matching the search criteria. See Food Fields below.",
    )


class FoodNutrient(BaseModel):
    id: int = Field(..., example=167514)
    amount: Optional[float] = Field(None, example=0)
    data_points: Optional[int] = Field(None, alias="dataPoints", example=49)
    min: Optional[float] = Field(None, example=73.73)
    max: Optional[float] = Field(None, example=91.8)
    median: Optional[float] = Field(None, example=90.3)
    type: Optional[str] = Field(None, example="FoodNutrient")
    nutrient: Optional[Nutrient] = None
    food_nutrient_derivation: Optional[FoodNutrientDerivation] = Field(
        None, alias="foodNutrientDerivation"
    )
    nutrient_analysis_details: Optional[NutrientAnalysisDetails] = Field(
        None, alias="nutrientAnalysisDetails"
    )


class FoodUpdateLog(BaseModel):
    fdc_id: Optional[int] = Field(None, alias="fdcId", example=534358)
    available_date: Optional[str] = Field(
        None, alias="availableDate", example="8/18/2018"
    )
    brand_owner: Optional[str] = Field(
        None, alias="brandOwner", example="Kar Nut Products Company"
    )
    data_source: Optional[str] = Field(None, alias="dataSource", example="LI")
    data_type: Optional[str] = Field(None, alias="dataType", example="Branded")
    description: Optional[str] = Field(None, example="NUT 'N BERRY MIX")
    food_class: Optional[str] = Field(None, alias="foodClass", example="Branded")
    gtin_upc: Optional[str] = Field(None, alias="gtinUpc", example="077034085228")
    household_serving_full_text: Optional[str] = Field(
        None, alias="householdServingFullText", example="1 ONZ"
    )
    ingredients: Optional[str] = Field(
        None,
        example="PEANUTS (PEANUTS, PEANUT AND/OR SUNFLOWER OIL). RAISINS. DRIED CRANBERRIES (CRANBERRIES, SUGAR, SUNFLOWER OIL). SUNFLOWER KERNELS AND ALMONDS (SUNFLOWER KERNELS AND ALMONDS, PEANUT AND/OR SUNFLOWER OIL).",
    )
    modified_date: Optional[str] = Field(
        None, alias="modifiedDate", example="8/18/2018"
    )
    publication_date: Optional[str] = Field(
        None, alias="publicationDate", example="4/1/2019"
    )
    serving_size: Optional[int] = Field(None, alias="servingSize", example=28)
    serving_size_unit: Optional[str] = Field(None, alias="servingSizeUnit", example="g")
    branded_food_category: Optional[str] = Field(
        None,
        alias="brandedFoodCategory",
        example="Popcorn, Peanuts, Seeds & Related Snacks",
    )
    changes: Optional[str] = Field(None, example="Nutrient Added, Nutrient Updated")
    food_attributes: Optional[List[FoodAttribute]] = Field(None, alias="foodAttributes")


class BrandedFoodItem(BaseModel):
    fdc_id: int = Field(..., alias="fdcId", example=534358)
    available_date: Optional[str] = Field(
        None, alias="availableDate", example="8/18/2018"
    )
    brand_owner: Optional[str] = Field(
        None, alias="brandOwner", example="Kar Nut Products Company"
    )
    data_source: Optional[str] = Field(None, alias="dataSource", example="LI")
    data_type: str = Field(..., alias="dataType", example="Branded")
    description: str = Field(..., example="NUT 'N BERRY MIX")
    food_class: Optional[str] = Field(None, alias="foodClass", example="Branded")
    gtin_upc: Optional[str] = Field(None, alias="gtinUpc", example="077034085228")
    household_serving_full_text: Optional[str] = Field(
        None, alias="householdServingFullText", example="1 ONZ"
    )
    ingredients: Optional[str] = Field(
        None,
        example="PEANUTS (PEANUTS, PEANUT AND/OR SUNFLOWER OIL). RAISINS. DRIED CRANBERRIES (CRANBERRIES, SUGAR, SUNFLOWER OIL). SUNFLOWER KERNELS AND ALMONDS (SUNFLOWER KERNELS AND ALMONDS, PEANUT AND/OR SUNFLOWER OIL).",
    )
    modified_date: Optional[str] = Field(
        None, alias="modifiedDate", example="8/18/2018"
    )
    publication_date: Optional[str] = Field(
        None, alias="publicationDate", example="4/1/2019"
    )
    serving_size: Optional[int] = Field(None, alias="servingSize", example=28)
    serving_size_unit: Optional[str] = Field(None, alias="servingSizeUnit", example="g")
    branded_food_category: Optional[str] = Field(
        None,
        alias="brandedFoodCategory",
        example="Popcorn, Peanuts, Seeds & Related Snacks",
    )
    food_nutrients: Optional[List[FoodNutrient]] = Field(None, alias="foodNutrients")
    food_update_log: Optional[List[FoodUpdateLog]] = Field(None, alias="foodUpdateLog")
    label_nutrients: Optional[BrandedFoodItemLabelNutrients] = Field(
        None, alias="labelNutrients"
    )


class FoundationFoodItem(BaseModel):
    fdc_id: int = Field(..., alias="fdcId", example=747448)
    data_type: str = Field(..., alias="dataType", example="Foundation")
    description: str = Field(..., example="Strawberries, raw")
    food_class: Optional[str] = Field(None, alias="foodClass", example="FinalFood")
    foot_note: Optional[str] = Field(
        None,
        alias="footNote",
        example="Source number reflects the actual number of samples analyzed for a nutrient. Repeat nutrient analyses may have been done on the same sample with the values shown.",
    )
    is_historical_reference: Optional[bool] = Field(
        None, alias="isHistoricalReference", example=False
    )
    ndb_number: Optional[int] = Field(None, alias="ndbNumber", example=9316)
    publication_date: Optional[str] = Field(
        None, alias="publicationDate", example="12/16/2019"
    )
    scientific_name: Optional[str] = Field(
        None, alias="scientificName", example="Fragaria X ananassa"
    )
    food_category: Optional[FoodCategory] = Field(None, alias="foodCategory")
    food_components: Optional[List[FoodComponent]] = Field(None, alias="foodComponents")
    food_nutrients: Optional[List[FoodNutrient]] = Field(None, alias="foodNutrients")
    food_portions: Optional[List[FoodPortion]] = Field(None, alias="foodPortions")
    input_foods: Optional[List[InputFoodFoundation]] = Field(None, alias="inputFoods")
    nutrient_conversion_factors: Optional[List[NutrientConversionFactors]] = Field(
        None, alias="nutrientConversionFactors"
    )


class SrLegacyFoodItem(BaseModel):
    fdc_id: int = Field(..., alias="fdcId", example=170379)
    data_type: str = Field(..., alias="dataType", example="SR Legacy")
    description: str = Field(..., example="Broccoli, raw")
    food_class: Optional[str] = Field(None, alias="foodClass", example="FinalFood")
    is_historical_reference: Optional[bool] = Field(
        None, alias="isHistoricalReference", example=True
    )
    ndb_number: Optional[int] = Field(None, alias="ndbNumber", example=11090)
    publication_date: Optional[str] = Field(
        None, alias="publicationDate", example="4/1/2019"
    )
    scientific_name: Optional[str] = Field(
        None, alias="scientificName", example="Brassica oleracea var. italica"
    )
    food_category: Optional[FoodCategory] = Field(None, alias="foodCategory")
    food_nutrients: Optional[List[FoodNutrient]] = Field(None, alias="foodNutrients")
    nutrient_conversion_factors: Optional[List[NutrientConversionFactors]] = Field(
        None, alias="nutrientConversionFactors"
    )


class SurveyFoodItem(BaseModel):
    fdc_id: int = Field(..., alias="fdcId", example=337985)
    datatype: Optional[str] = Field(None, example="Survey (FNDDS)")
    description: str = Field(..., example="Beef curry")
    end_date: Optional[str] = Field(None, alias="endDate", example="12/31/2014")
    food_class: Optional[str] = Field(None, alias="foodClass", example="Survey")
    food_code: Optional[str] = Field(None, alias="foodCode", example="27116100")
    publication_date: Optional[str] = Field(
        None, alias="publicationDate", example="4/1/2019"
    )
    start_date: Optional[str] = Field(None, alias="startDate", example="1/1/2013")
    food_attributes: Optional[List[FoodAttribute]] = Field(None, alias="foodAttributes")
    food_portions: Optional[List[FoodPortion]] = Field(None, alias="foodPortions")
    input_foods: Optional[List[InputFoodSurvey]] = Field(None, alias="inputFoods")
    wweia_food_category: Optional[WweiaFoodCategory] = Field(
        None, alias="wweiaFoodCategory"
    )


class InputFoodSurvey(BaseModel):
    id: Optional[int] = Field(None, example=18146)
    amount: Optional[float] = Field(None, example=1.5)
    food_description: Optional[str] = Field(
        None, alias="foodDescription", example="Spices, curry powder"
    )
    ingredient_code: Optional[int] = Field(None, alias="ingredientCode", example=2015)
    ingredient_description: Optional[str] = Field(
        None, alias="ingredientDescription", example="Spices, curry powder"
    )
    ingredient_weight: Optional[float] = Field(
        None, alias="ingredientWeight", example=9.45
    )
    portion_code: Optional[str] = Field(None, alias="portionCode", example="21000")
    portion_description: Optional[str] = Field(
        None, alias="portionDescription", example="1 tablespoon"
    )
    sequence_number: Optional[int] = Field(None, alias="sequenceNumber", example=6)
    survey_flag: Optional[int] = Field(None, alias="surveyFlag", example=0)
    unit: Optional[str] = Field(None, example="TB")
    input_food: Optional[SurveyFoodItem] = Field(None, alias="inputFood")
    retention_factor: Optional[RetentionFactor] = Field(None, alias="retentionFactor")


class InlineResponse200(BaseModel):
    __root__: Union[
        AbridgedFoodItem,
        BrandedFoodItem,
        FoundationFoodItem,
        SrLegacyFoodItem,
        SurveyFoodItem,
    ]


SurveyFoodItem.update_forward_refs()
